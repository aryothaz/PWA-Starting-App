{"version":3,"sources":["components/BluetoothInput.js","components/BluetoothConnectButton.js","components/BluetoothConnect.js","components/Bluetooth.js","App.js","index.js"],"names":["BluetoothInput","input","React","createRef","handleSubmit","e","preventDefault","console","log","current","value","props","onBluetoothInputChange","emptyInput","target","onSubmit","this","className","id","type","name","placeholder","ref","onChange","autoComplete","Component","BluetoothConnectButton","onClick","connect","connected","BLEService_UUID","BluetoothConnect","connectToDevice","a","navigator","bluetooth","requestDevice","optionalServices","acceptAllDevices","then","device","onDeviceChange","addEventListener","onDisconnected","gatt","server","onServerChange","getPrimaryService","service","onServiceChange","getCharacteristic","characteristic","onCharacteristicChange","handleNotifications","onConnectedChange","startNotifications","catch","error","disconnect","render","Bluetooth","state","supportsBluetooth","handleDeviceChange","setState","handleServerChange","handleServiceChange","handleCharacteristicChange","handleConnectedChange","handleSupportsBluetoothChange","componentDidMount","event","str","i","byteLength","String","fromCharCode","getUint8","handleBluetoothInputChange","encoder","TextEncoder","writeValue","encode","_","App","ReactDOM","document","getElementById"],"mappings":"sOAkCeA,E,4MA/BbC,MAAQC,IAAMC,Y,EACdC,aAAe,SAACC,GACdA,EAAEC,iBACFC,QAAQC,IAAI,EAAKP,MAAMQ,QAAQC,OAC/B,EAAKC,MAAMC,uBAAuB,EAAKX,MAAMQ,QAAQC,Q,EAEvDG,WAAa,SAACR,GACW,KAAnBA,EAAES,OAAOJ,QACXH,QAAQC,IAAI,EAAKP,MAAMQ,QAAQC,OAC/B,EAAKC,MAAMC,uBAAuB,EAAKX,MAAMQ,QAAQC,S,4CAGzD,WAAU,IAAD,OACP,OACE,uBAAMK,SAAUC,KAAKZ,aAAca,UAAU,cAA7C,UACE,uBACEC,GAAG,iBACHC,KAAK,OACLF,UAAU,eACVG,KAAK,iBACLC,YAAY,iBACZC,IAAKN,KAAKf,MACVsB,SAAU,SAAClB,GAAD,OAAO,EAAKQ,WAAWR,IACjCmB,aAAa,mBAEf,wBAAQL,KAAK,SAAb,2B,GA1BqBjB,IAAMuB,W,uBCQpBC,EARgB,SAACf,GAC9B,OACE,qBAAKM,UAAU,mBAAf,SACI,wBAAQU,QAAShB,EAAMiB,QAAvB,SAAiCjB,EAAMkB,UAAU,YAAY,gBCF/DC,EAAmB,KAoDVC,E,4MA/CXC,gB,sBAAkB,sBAAAC,EAAA,sDACdC,UAAUC,UAAUC,cAAc,CAC9BC,iBAAkB,CAACP,GACnBQ,kBAAkB,IAErBC,MAAK,SAAAC,GAGF,OAFA,EAAK7B,MAAM8B,eAAeD,GAC1BA,EAAOE,iBAAiB,yBAA0B,EAAK/B,MAAMgC,gBACtDH,EAAOI,KAAKhB,aAEtBW,MAAK,SAAAM,GAEF,OADA,EAAKlC,MAAMmC,eAAeD,GACnBA,EAAOE,kBAAkBjB,MAEnCS,MAAK,SAAAS,GAEF,OADA,EAAKrC,MAAMsC,gBAAgBD,GACpBA,EAAQE,kBApBK,SAsBvBX,MAAK,SAAAY,GAKF,OAJA,EAAKxC,MAAMyC,uBAAuBD,GAClCA,EAAeT,iBAAiB,6BACA,EAAK/B,MAAM0C,qBAC3C,EAAK1C,MAAM2C,mBAAkB,GACtBH,EAAeI,wBAEzBC,OAAM,SAAAC,GACA,EAAK9C,MAAM6B,QAAU,EAAK7B,MAAM6B,OAAOI,KAAKf,WAE3C,EAAKlB,MAAM6B,OAAOI,KAAKc,aAE3BnD,QAAQC,IAAI,wBAAyBiD,MA9B3B,2C,EAkClBE,OAAS,WAAO,IAER9B,EACA,EAAKlB,MADLkB,UAEJ,OACI,cAAC,EAAD,CACID,QAAS,EAAKI,gBACdH,UAAWA,K,YA3CI3B,IAAMuB,WC0GtBmC,E,4MA3GbC,MAAQ,CACNC,mBAAmB,EACnBtB,OAAQ,KACRK,OAAQ,KACRG,QAAS,KACTG,eAAgB,KAChBzC,MAAO,KACPmB,WAAW,G,EAEbkC,mBAAqB,SAACvB,GACpB,EAAKwB,SAAS,CAAExB,Y,EAElByB,mBAAqB,SAACpB,GACpB,EAAKmB,SAAS,CAAEnB,Y,EAElBqB,oBAAsB,SAAClB,GACrB,EAAKgB,SAAS,CAAEhB,a,EAElBmB,2BAA6B,SAAChB,GAC5B,EAAKa,SAAS,CAAEb,oB,EAElBiB,sBAAwB,SAACvC,GACvB,EAAKmC,SAAS,CAAEnC,e,EAElBwC,8BAAgC,SAACP,GAC/B,EAAKE,SAAS,CAAEF,uB,EAGlBQ,kBAAoB,WACdpC,UAAUC,WAAW,EAAKkC,+BAA8B,I,EAG9D1B,eAAiB,WACf,EAAKqB,SAAS,CACZnC,WAAW,K,EAIfwB,oBAAsB,SAACkB,GAGrB,IAFA,IAAI7D,EAAQ6D,EAAMzD,OAAOJ,MACrB8D,EAAM,GACDC,EAAI,EAAGA,EAAI/D,EAAMgE,WAAYD,IACpCD,GAAOG,OAAOC,aAAalE,EAAMmE,SAASJ,IAE5ClE,QAAQC,IAAIgE,GACZ,EAAKR,SAAS,CACZtD,MAAO8D,K,EAIXM,2BAA6B,SAACpE,GAC5B,IAAIqE,EAAU,IAAIC,YAAY,SAC9BzE,QAAQC,IAAI,6BAEZ,EAAKqD,MAAMV,eACR8B,WAAWF,EAAQG,OAAOxE,IAC1B6B,MAAK,SAAC4C,GACL5E,QAAQC,IAAI,gCAAkCE,MAE/C8C,OAAM,SAACC,GACNlD,QAAQC,IAAI,6BAA+BiD,O,EAIjDE,OAAS,WAAO,IAAD,EAQT,EAAKE,MANPC,EAFW,EAEXA,kBACAjC,EAHW,EAGXA,UACAW,EAJW,EAIXA,OACAK,EALW,EAKXA,OACAG,EANW,EAMXA,QACAG,EAPW,EAOXA,eAEF,OACE,sBAAKlC,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,uBACC6C,EACC,cAAC,EAAD,CACEtB,OAAQA,EACRC,eAAgB,EAAKsB,mBACrBlB,OAAQA,EACRC,eAAgB,EAAKmB,mBACrBjB,QAASA,EACTC,gBAAiB,EAAKiB,oBACtBf,eAAgBA,EAChBC,uBAAwB,EAAKe,2BAC7BtC,UAAWA,EACXyB,kBAAmB,EAAKc,sBACxBf,oBAAqB,EAAKA,oBAC1BV,eAAgB,EAAKA,iBAGvB,qBAAK1B,UAAU,QAAf,oDAEDY,GACC,sBAAKZ,UAAU,YAAf,UACE,cAAC,EAAD,CACEL,uBAAwB,EAAKkE,6BAE/B,4BAAItC,EAAOpB,c,YApGClB,IAAMuB,WCOf2D,EAPH,WACR,OACI,qBAAKnE,UAAU,MAAf,SACA,cAAC,EAAD,OCFRoE,IAAS1B,OAAO,cAAC,EAAD,IAAS2B,SAASC,eAAe,W","file":"static/js/main.d1dce694.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass BluetoothInput extends React.Component {\r\n  input = React.createRef();\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.input.current.value);\r\n    this.props.onBluetoothInputChange(this.input.current.value);\r\n  };\r\n  emptyInput = (e) => {\r\n    if (e.target.value === \"\") {\r\n      console.log(this.input.current.value);\r\n      this.props.onBluetoothInputChange(this.input.current.value);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"buscar-form\">\r\n        <input\r\n          id=\"BluetoothInput\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          name=\"BluetoothInput\"\r\n          placeholder=\"Enviar mensaje\"\r\n          ref={this.input}\r\n          onChange={(e) => this.emptyInput(e)}\r\n          autoComplete=\"BluetoothInput\"\r\n        />\r\n        <button type=\"submit\">Enviar</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BluetoothInput;\r\n","import React from \"react\";\r\n\r\nconst BluetoothConnectButton = (props) => {\r\n  return (\r\n    <div className=\"BluetoothConnect\">\r\n        <button onClick={props.connect}>{props.connected?\"Conectado\":\"Conectar\"}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BluetoothConnectButton;\r\n\r\n\r\n","import React from \"react\";\r\nimport BluetoothConnectButton from \"./BluetoothConnectButton\";\r\n\r\nconst BLEService_UUID  = 0x1700;\r\nconst BLE_Characteristic_UUID = 0x1A00;\r\n\r\nclass BluetoothConnect extends React.Component {\r\n\r\n    connectToDevice = async () => {\r\n        navigator.bluetooth.requestDevice({\r\n            optionalServices: [BLEService_UUID],\r\n            acceptAllDevices: true\r\n        })\r\n        .then(device => {\r\n            this.props.onDeviceChange(device);\r\n            device.addEventListener('gattserverdisconnected', this.props.onDisconnected);\r\n            return device.gatt.connect();\r\n        })\r\n        .then(server => {\r\n            this.props.onServerChange(server);\r\n            return server.getPrimaryService(BLEService_UUID);\r\n        })\r\n        .then(service => {\r\n            this.props.onServiceChange(service);\r\n            return service.getCharacteristic(BLE_Characteristic_UUID);\r\n        })\r\n        .then(characteristic => {\r\n            this.props.onCharacteristicChange(characteristic);\r\n            characteristic.addEventListener('characteristicvaluechanged',\r\n                                            this.props.handleNotifications);\r\n            this.props.onConnectedChange(true);\r\n            return characteristic.startNotifications();\r\n        })\r\n        .catch(error => {\r\n            if(this.props.device && this.props.device.gatt.connected)\r\n            {\r\n                this.props.device.gatt.disconnect();\r\n            }\r\n            console.log(\"Bluetooth conection: \"+ error);\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        const {\r\n            connected,\r\n        } = this.props;\r\n        return (\r\n            <BluetoothConnectButton\r\n                connect={this.connectToDevice}\r\n                connected={connected}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BluetoothConnect;","import BluetoothInput from \"./BluetoothInput\";\r\nimport React from \"react\";\r\nimport BluetoothConnect from \"./BluetoothConnect\";\r\n\r\nclass Bluetooth extends React.Component {\r\n  state = {\r\n    supportsBluetooth: false,\r\n    device: null,\r\n    server: null,\r\n    service: null,\r\n    characteristic: null,\r\n    value: null,\r\n    connected: false,\r\n  };\r\n  handleDeviceChange = (device) => {\r\n    this.setState({ device });\r\n  };\r\n  handleServerChange = (server) => {\r\n    this.setState({ server });\r\n  };\r\n  handleServiceChange = (service) => {\r\n    this.setState({ service });\r\n  };\r\n  handleCharacteristicChange = (characteristic) => {\r\n    this.setState({ characteristic });\r\n  };\r\n  handleConnectedChange = (connected) => {\r\n    this.setState({ connected });\r\n  };\r\n  handleSupportsBluetoothChange = (supportsBluetooth) => {\r\n    this.setState({ supportsBluetooth });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (navigator.bluetooth) this.handleSupportsBluetoothChange(true);\r\n  };\r\n\r\n  onDisconnected = () => {\r\n    this.setState({\r\n      connected: false,\r\n    });\r\n  };\r\n\r\n  handleNotifications = (event) => {\r\n    let value = event.target.value;\r\n    let str = \"\";\r\n    for (let i = 0; i < value.byteLength; i++) {\r\n      str += String.fromCharCode(value.getUint8(i));\r\n    }\r\n    console.log(str);\r\n    this.setState({\r\n      value: str,\r\n    });\r\n  };\r\n\r\n  handleBluetoothInputChange = (value) => {\r\n    let encoder = new TextEncoder(\"utf-8\");\r\n    console.log(\"Setting Characteristic...\");\r\n\r\n    this.state.characteristic\r\n      .writeValue(encoder.encode(value))\r\n      .then((_) => {\r\n        console.log(\"> Characteristic changed to: \" + value);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Set Characteristic error: \" + error);\r\n      });\r\n  };\r\n\r\n  render = () => {\r\n    const {\r\n      supportsBluetooth,\r\n      connected,\r\n      device,\r\n      server,\r\n      service,\r\n      characteristic,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"Bluetooth\">\r\n        <h1 className=\"bluetooth-title\">Bluetooth</h1>\r\n        {supportsBluetooth ? (\r\n          <BluetoothConnect\r\n            device={device}\r\n            onDeviceChange={this.handleDeviceChange}\r\n            server={server}\r\n            onServerChange={this.handleServerChange}\r\n            service={service}\r\n            onServiceChange={this.handleServiceChange}\r\n            characteristic={characteristic}\r\n            onCharacteristicChange={this.handleCharacteristicChange}\r\n            connected={connected}\r\n            onConnectedChange={this.handleConnectedChange}\r\n            handleNotifications={this.handleNotifications}\r\n            onDisconnected={this.onDisconnected}\r\n          />\r\n        ) : (\r\n          <div className=\"no-bt\">Este dispositivo no soporta bluetooth.</div>\r\n        )}\r\n        {connected && (\r\n          <div className=\"connected\">\r\n            <BluetoothInput\r\n              onBluetoothInputChange={this.handleBluetoothInputChange}\r\n            />\r\n            <p>{device.name}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Bluetooth;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Bluetooth from './components/Bluetooth';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n        <Bluetooth />\r\n        </div>\r\n    );\r\n    }\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}